//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace CRTest {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DS_Report : DataSet {
        
        private VoucherDetailsDataTable tableVoucherDetails;
        
        private VoucherMasterDataTable tableVoucherMaster;
        
        private AgentMasterDataTable tableAgentMaster;
        
        public DS_Report() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DS_Report(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["VoucherDetails"] != null)) {
                    this.Tables.Add(new VoucherDetailsDataTable(ds.Tables["VoucherDetails"]));
                }
                if ((ds.Tables["VoucherMaster"] != null)) {
                    this.Tables.Add(new VoucherMasterDataTable(ds.Tables["VoucherMaster"]));
                }
                if ((ds.Tables["AgentMaster"] != null)) {
                    this.Tables.Add(new AgentMasterDataTable(ds.Tables["AgentMaster"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VoucherDetailsDataTable VoucherDetails {
            get {
                return this.tableVoucherDetails;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VoucherMasterDataTable VoucherMaster {
            get {
                return this.tableVoucherMaster;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AgentMasterDataTable AgentMaster {
            get {
                return this.tableAgentMaster;
            }
        }
        
        public override DataSet Clone() {
            DS_Report cln = ((DS_Report)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["VoucherDetails"] != null)) {
                this.Tables.Add(new VoucherDetailsDataTable(ds.Tables["VoucherDetails"]));
            }
            if ((ds.Tables["VoucherMaster"] != null)) {
                this.Tables.Add(new VoucherMasterDataTable(ds.Tables["VoucherMaster"]));
            }
            if ((ds.Tables["AgentMaster"] != null)) {
                this.Tables.Add(new AgentMasterDataTable(ds.Tables["AgentMaster"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableVoucherDetails = ((VoucherDetailsDataTable)(this.Tables["VoucherDetails"]));
            if ((this.tableVoucherDetails != null)) {
                this.tableVoucherDetails.InitVars();
            }
            this.tableVoucherMaster = ((VoucherMasterDataTable)(this.Tables["VoucherMaster"]));
            if ((this.tableVoucherMaster != null)) {
                this.tableVoucherMaster.InitVars();
            }
            this.tableAgentMaster = ((AgentMasterDataTable)(this.Tables["AgentMaster"]));
            if ((this.tableAgentMaster != null)) {
                this.tableAgentMaster.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DS_Report";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DS_Report.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableVoucherDetails = new VoucherDetailsDataTable();
            this.Tables.Add(this.tableVoucherDetails);
            this.tableVoucherMaster = new VoucherMasterDataTable();
            this.Tables.Add(this.tableVoucherMaster);
            this.tableAgentMaster = new AgentMasterDataTable();
            this.Tables.Add(this.tableAgentMaster);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("VoucherMasterVoucherDetails", new DataColumn[] {
                        this.tableVoucherMaster.IDColumn}, new DataColumn[] {
                        this.tableVoucherDetails.MasterIDColumn});
            this.tableVoucherDetails.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("AgentMasterVoucherDetails", new DataColumn[] {
                        this.tableAgentMaster.IdColumn}, new DataColumn[] {
                        this.tableVoucherDetails.AgentAccountIDColumn});
            this.tableVoucherDetails.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.SetNull;
            fkc.UpdateRule = System.Data.Rule.Cascade;
        }
        
        private bool ShouldSerializeVoucherDetails() {
            return false;
        }
        
        private bool ShouldSerializeVoucherMaster() {
            return false;
        }
        
        private bool ShouldSerializeAgentMaster() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void VoucherDetailsRowChangeEventHandler(object sender, VoucherDetailsRowChangeEvent e);
        
        public delegate void VoucherMasterRowChangeEventHandler(object sender, VoucherMasterRowChangeEvent e);
        
        public delegate void AgentMasterRowChangeEventHandler(object sender, AgentMasterRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VoucherDetailsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDetailID;
            
            private DataColumn columnAgentAccountID;
            
            private DataColumn columnMasterID;
            
            private DataColumn columnFC_Debit;
            
            private DataColumn columnLC_Debit;
            
            private DataColumn columnFC_Credit;
            
            private DataColumn columnLC_Credit;
            
            private DataColumn columnRate;
            
            private DataColumn columnPrincipal_Commision;
            
            internal VoucherDetailsDataTable() : 
                    base("VoucherDetails") {
                this.InitClass();
            }
            
            internal VoucherDetailsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DetailIDColumn {
                get {
                    return this.columnDetailID;
                }
            }
            
            internal DataColumn AgentAccountIDColumn {
                get {
                    return this.columnAgentAccountID;
                }
            }
            
            internal DataColumn MasterIDColumn {
                get {
                    return this.columnMasterID;
                }
            }
            
            internal DataColumn FC_DebitColumn {
                get {
                    return this.columnFC_Debit;
                }
            }
            
            internal DataColumn LC_DebitColumn {
                get {
                    return this.columnLC_Debit;
                }
            }
            
            internal DataColumn FC_CreditColumn {
                get {
                    return this.columnFC_Credit;
                }
            }
            
            internal DataColumn LC_CreditColumn {
                get {
                    return this.columnLC_Credit;
                }
            }
            
            internal DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            internal DataColumn Principal_CommisionColumn {
                get {
                    return this.columnPrincipal_Commision;
                }
            }
            
            public VoucherDetailsRow this[int index] {
                get {
                    return ((VoucherDetailsRow)(this.Rows[index]));
                }
            }
            
            public event VoucherDetailsRowChangeEventHandler VoucherDetailsRowChanged;
            
            public event VoucherDetailsRowChangeEventHandler VoucherDetailsRowChanging;
            
            public event VoucherDetailsRowChangeEventHandler VoucherDetailsRowDeleted;
            
            public event VoucherDetailsRowChangeEventHandler VoucherDetailsRowDeleting;
            
            public void AddVoucherDetailsRow(VoucherDetailsRow row) {
                this.Rows.Add(row);
            }
            
            public VoucherDetailsRow AddVoucherDetailsRow(System.Guid AgentAccountID, int MasterID, System.Decimal FC_Debit, System.Decimal LC_Debit, System.Decimal FC_Credit, System.Decimal LC_Credit, System.Decimal Rate, string Principal_Commision) {
                VoucherDetailsRow rowVoucherDetailsRow = ((VoucherDetailsRow)(this.NewRow()));
                rowVoucherDetailsRow.ItemArray = new object[] {
                        null,
                        AgentAccountID,
                        MasterID,
                        FC_Debit,
                        LC_Debit,
                        FC_Credit,
                        LC_Credit,
                        Rate,
                        Principal_Commision};
                this.Rows.Add(rowVoucherDetailsRow);
                return rowVoucherDetailsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                VoucherDetailsDataTable cln = ((VoucherDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new VoucherDetailsDataTable();
            }
            
            internal void InitVars() {
                this.columnDetailID = this.Columns["DetailID"];
                this.columnAgentAccountID = this.Columns["AgentAccountID"];
                this.columnMasterID = this.Columns["MasterID"];
                this.columnFC_Debit = this.Columns["FC_Debit"];
                this.columnLC_Debit = this.Columns["LC_Debit"];
                this.columnFC_Credit = this.Columns["FC_Credit"];
                this.columnLC_Credit = this.Columns["LC_Credit"];
                this.columnRate = this.Columns["Rate"];
                this.columnPrincipal_Commision = this.Columns["Principal_Commision"];
            }
            
            private void InitClass() {
                this.columnDetailID = new DataColumn("DetailID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDetailID);
                this.columnAgentAccountID = new DataColumn("AgentAccountID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAgentAccountID);
                this.columnMasterID = new DataColumn("MasterID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMasterID);
                this.columnFC_Debit = new DataColumn("FC_Debit", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFC_Debit);
                this.columnLC_Debit = new DataColumn("LC_Debit", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLC_Debit);
                this.columnFC_Credit = new DataColumn("FC_Credit", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFC_Credit);
                this.columnLC_Credit = new DataColumn("LC_Credit", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLC_Credit);
                this.columnRate = new DataColumn("Rate", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRate);
                this.columnPrincipal_Commision = new DataColumn("Principal_Commision", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrincipal_Commision);
                this.Constraints.Add(new UniqueConstraint("DR_AgentMasterName", new DataColumn[] {
                                this.columnAgentAccountID}, false));
                this.Constraints.Add(new UniqueConstraint("DS_ReportKey1", new DataColumn[] {
                                this.columnDetailID}, false));
                this.columnDetailID.AutoIncrement = true;
                this.columnDetailID.AllowDBNull = false;
                this.columnDetailID.ReadOnly = true;
                this.columnDetailID.Unique = true;
                this.columnAgentAccountID.AllowDBNull = false;
                this.columnAgentAccountID.Unique = true;
                this.columnMasterID.AllowDBNull = false;
            }
            
            public VoucherDetailsRow NewVoucherDetailsRow() {
                return ((VoucherDetailsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new VoucherDetailsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VoucherDetailsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VoucherDetailsRowChanged != null)) {
                    this.VoucherDetailsRowChanged(this, new VoucherDetailsRowChangeEvent(((VoucherDetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VoucherDetailsRowChanging != null)) {
                    this.VoucherDetailsRowChanging(this, new VoucherDetailsRowChangeEvent(((VoucherDetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VoucherDetailsRowDeleted != null)) {
                    this.VoucherDetailsRowDeleted(this, new VoucherDetailsRowChangeEvent(((VoucherDetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VoucherDetailsRowDeleting != null)) {
                    this.VoucherDetailsRowDeleting(this, new VoucherDetailsRowChangeEvent(((VoucherDetailsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVoucherDetailsRow(VoucherDetailsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VoucherDetailsRow : DataRow {
            
            private VoucherDetailsDataTable tableVoucherDetails;
            
            internal VoucherDetailsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVoucherDetails = ((VoucherDetailsDataTable)(this.Table));
            }
            
            public int DetailID {
                get {
                    return ((int)(this[this.tableVoucherDetails.DetailIDColumn]));
                }
                set {
                    this[this.tableVoucherDetails.DetailIDColumn] = value;
                }
            }
            
            public System.Guid AgentAccountID {
                get {
                    return ((System.Guid)(this[this.tableVoucherDetails.AgentAccountIDColumn]));
                }
                set {
                    this[this.tableVoucherDetails.AgentAccountIDColumn] = value;
                }
            }
            
            public int MasterID {
                get {
                    return ((int)(this[this.tableVoucherDetails.MasterIDColumn]));
                }
                set {
                    this[this.tableVoucherDetails.MasterIDColumn] = value;
                }
            }
            
            public System.Decimal FC_Debit {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableVoucherDetails.FC_DebitColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVoucherDetails.FC_DebitColumn] = value;
                }
            }
            
            public System.Decimal LC_Debit {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableVoucherDetails.LC_DebitColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVoucherDetails.LC_DebitColumn] = value;
                }
            }
            
            public System.Decimal FC_Credit {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableVoucherDetails.FC_CreditColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVoucherDetails.FC_CreditColumn] = value;
                }
            }
            
            public System.Decimal LC_Credit {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableVoucherDetails.LC_CreditColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVoucherDetails.LC_CreditColumn] = value;
                }
            }
            
            public System.Decimal Rate {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableVoucherDetails.RateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVoucherDetails.RateColumn] = value;
                }
            }
            
            public string Principal_Commision {
                get {
                    try {
                        return ((string)(this[this.tableVoucherDetails.Principal_CommisionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVoucherDetails.Principal_CommisionColumn] = value;
                }
            }
            
            public bool IsFC_DebitNull() {
                return this.IsNull(this.tableVoucherDetails.FC_DebitColumn);
            }
            
            public void SetFC_DebitNull() {
                this[this.tableVoucherDetails.FC_DebitColumn] = System.Convert.DBNull;
            }
            
            public bool IsLC_DebitNull() {
                return this.IsNull(this.tableVoucherDetails.LC_DebitColumn);
            }
            
            public void SetLC_DebitNull() {
                this[this.tableVoucherDetails.LC_DebitColumn] = System.Convert.DBNull;
            }
            
            public bool IsFC_CreditNull() {
                return this.IsNull(this.tableVoucherDetails.FC_CreditColumn);
            }
            
            public void SetFC_CreditNull() {
                this[this.tableVoucherDetails.FC_CreditColumn] = System.Convert.DBNull;
            }
            
            public bool IsLC_CreditNull() {
                return this.IsNull(this.tableVoucherDetails.LC_CreditColumn);
            }
            
            public void SetLC_CreditNull() {
                this[this.tableVoucherDetails.LC_CreditColumn] = System.Convert.DBNull;
            }
            
            public bool IsRateNull() {
                return this.IsNull(this.tableVoucherDetails.RateColumn);
            }
            
            public void SetRateNull() {
                this[this.tableVoucherDetails.RateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrincipal_CommisionNull() {
                return this.IsNull(this.tableVoucherDetails.Principal_CommisionColumn);
            }
            
            public void SetPrincipal_CommisionNull() {
                this[this.tableVoucherDetails.Principal_CommisionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VoucherDetailsRowChangeEvent : EventArgs {
            
            private VoucherDetailsRow eventRow;
            
            private DataRowAction eventAction;
            
            public VoucherDetailsRowChangeEvent(VoucherDetailsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VoucherDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VoucherMasterDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnVoucherNumber;
            
            private DataColumn columnVoucherDate;
            
            private DataColumn columnValueDate;
            
            private DataColumn columnNarration;
            
            internal VoucherMasterDataTable() : 
                    base("VoucherMaster") {
                this.InitClass();
            }
            
            internal VoucherMasterDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn VoucherNumberColumn {
                get {
                    return this.columnVoucherNumber;
                }
            }
            
            internal DataColumn VoucherDateColumn {
                get {
                    return this.columnVoucherDate;
                }
            }
            
            internal DataColumn ValueDateColumn {
                get {
                    return this.columnValueDate;
                }
            }
            
            internal DataColumn NarrationColumn {
                get {
                    return this.columnNarration;
                }
            }
            
            public VoucherMasterRow this[int index] {
                get {
                    return ((VoucherMasterRow)(this.Rows[index]));
                }
            }
            
            public event VoucherMasterRowChangeEventHandler VoucherMasterRowChanged;
            
            public event VoucherMasterRowChangeEventHandler VoucherMasterRowChanging;
            
            public event VoucherMasterRowChangeEventHandler VoucherMasterRowDeleted;
            
            public event VoucherMasterRowChangeEventHandler VoucherMasterRowDeleting;
            
            public void AddVoucherMasterRow(VoucherMasterRow row) {
                this.Rows.Add(row);
            }
            
            public VoucherMasterRow AddVoucherMasterRow(int ID, System.Decimal VoucherNumber, System.DateTime VoucherDate, System.DateTime ValueDate, string Narration) {
                VoucherMasterRow rowVoucherMasterRow = ((VoucherMasterRow)(this.NewRow()));
                rowVoucherMasterRow.ItemArray = new object[] {
                        ID,
                        VoucherNumber,
                        VoucherDate,
                        ValueDate,
                        Narration};
                this.Rows.Add(rowVoucherMasterRow);
                return rowVoucherMasterRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                VoucherMasterDataTable cln = ((VoucherMasterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new VoucherMasterDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnVoucherNumber = this.Columns["VoucherNumber"];
                this.columnVoucherDate = this.Columns["VoucherDate"];
                this.columnValueDate = this.Columns["ValueDate"];
                this.columnNarration = this.Columns["Narration"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnVoucherNumber = new DataColumn("VoucherNumber", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVoucherNumber);
                this.columnVoucherDate = new DataColumn("VoucherDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVoucherDate);
                this.columnValueDate = new DataColumn("ValueDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnValueDate);
                this.columnNarration = new DataColumn("Narration", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNarration);
                this.Constraints.Add(new UniqueConstraint("DS_VMasterKey", new DataColumn[] {
                                this.columnID}, false));
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
            }
            
            public VoucherMasterRow NewVoucherMasterRow() {
                return ((VoucherMasterRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new VoucherMasterRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VoucherMasterRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VoucherMasterRowChanged != null)) {
                    this.VoucherMasterRowChanged(this, new VoucherMasterRowChangeEvent(((VoucherMasterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VoucherMasterRowChanging != null)) {
                    this.VoucherMasterRowChanging(this, new VoucherMasterRowChangeEvent(((VoucherMasterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VoucherMasterRowDeleted != null)) {
                    this.VoucherMasterRowDeleted(this, new VoucherMasterRowChangeEvent(((VoucherMasterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VoucherMasterRowDeleting != null)) {
                    this.VoucherMasterRowDeleting(this, new VoucherMasterRowChangeEvent(((VoucherMasterRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVoucherMasterRow(VoucherMasterRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VoucherMasterRow : DataRow {
            
            private VoucherMasterDataTable tableVoucherMaster;
            
            internal VoucherMasterRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVoucherMaster = ((VoucherMasterDataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.tableVoucherMaster.IDColumn]));
                }
                set {
                    this[this.tableVoucherMaster.IDColumn] = value;
                }
            }
            
            public System.Decimal VoucherNumber {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableVoucherMaster.VoucherNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVoucherMaster.VoucherNumberColumn] = value;
                }
            }
            
            public System.DateTime VoucherDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableVoucherMaster.VoucherDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVoucherMaster.VoucherDateColumn] = value;
                }
            }
            
            public System.DateTime ValueDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableVoucherMaster.ValueDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVoucherMaster.ValueDateColumn] = value;
                }
            }
            
            public string Narration {
                get {
                    try {
                        return ((string)(this[this.tableVoucherMaster.NarrationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVoucherMaster.NarrationColumn] = value;
                }
            }
            
            public bool IsVoucherNumberNull() {
                return this.IsNull(this.tableVoucherMaster.VoucherNumberColumn);
            }
            
            public void SetVoucherNumberNull() {
                this[this.tableVoucherMaster.VoucherNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsVoucherDateNull() {
                return this.IsNull(this.tableVoucherMaster.VoucherDateColumn);
            }
            
            public void SetVoucherDateNull() {
                this[this.tableVoucherMaster.VoucherDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsValueDateNull() {
                return this.IsNull(this.tableVoucherMaster.ValueDateColumn);
            }
            
            public void SetValueDateNull() {
                this[this.tableVoucherMaster.ValueDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsNarrationNull() {
                return this.IsNull(this.tableVoucherMaster.NarrationColumn);
            }
            
            public void SetNarrationNull() {
                this[this.tableVoucherMaster.NarrationColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VoucherMasterRowChangeEvent : EventArgs {
            
            private VoucherMasterRow eventRow;
            
            private DataRowAction eventAction;
            
            public VoucherMasterRowChangeEvent(VoucherMasterRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VoucherMasterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AgentMasterDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnParentId;
            
            private DataColumn columnName;
            
            private DataColumn columnNumber;
            
            private DataColumn columnActive;
            
            internal AgentMasterDataTable() : 
                    base("AgentMaster") {
                this.InitClass();
            }
            
            internal AgentMasterDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn ParentIdColumn {
                get {
                    return this.columnParentId;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            public AgentMasterRow this[int index] {
                get {
                    return ((AgentMasterRow)(this.Rows[index]));
                }
            }
            
            public event AgentMasterRowChangeEventHandler AgentMasterRowChanged;
            
            public event AgentMasterRowChangeEventHandler AgentMasterRowChanging;
            
            public event AgentMasterRowChangeEventHandler AgentMasterRowDeleted;
            
            public event AgentMasterRowChangeEventHandler AgentMasterRowDeleting;
            
            public void AddAgentMasterRow(AgentMasterRow row) {
                this.Rows.Add(row);
            }
            
            public AgentMasterRow AddAgentMasterRow(System.Guid Id, System.Guid ParentId, string Name, string Number, bool Active) {
                AgentMasterRow rowAgentMasterRow = ((AgentMasterRow)(this.NewRow()));
                rowAgentMasterRow.ItemArray = new object[] {
                        Id,
                        ParentId,
                        Name,
                        Number,
                        Active};
                this.Rows.Add(rowAgentMasterRow);
                return rowAgentMasterRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AgentMasterDataTable cln = ((AgentMasterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AgentMasterDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["Id"];
                this.columnParentId = this.Columns["ParentId"];
                this.columnName = this.Columns["Name"];
                this.columnNumber = this.Columns["Number"];
                this.columnActive = this.Columns["Active"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnParentId = new DataColumn("ParentId", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParentId);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnActive = new DataColumn("Active", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnActive);
                this.Constraints.Add(new UniqueConstraint("DR_AgentMaster", new DataColumn[] {
                                this.columnId}, false));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnActive.AllowDBNull = false;
            }
            
            public AgentMasterRow NewAgentMasterRow() {
                return ((AgentMasterRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AgentMasterRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AgentMasterRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AgentMasterRowChanged != null)) {
                    this.AgentMasterRowChanged(this, new AgentMasterRowChangeEvent(((AgentMasterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AgentMasterRowChanging != null)) {
                    this.AgentMasterRowChanging(this, new AgentMasterRowChangeEvent(((AgentMasterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AgentMasterRowDeleted != null)) {
                    this.AgentMasterRowDeleted(this, new AgentMasterRowChangeEvent(((AgentMasterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AgentMasterRowDeleting != null)) {
                    this.AgentMasterRowDeleting(this, new AgentMasterRowChangeEvent(((AgentMasterRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAgentMasterRow(AgentMasterRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AgentMasterRow : DataRow {
            
            private AgentMasterDataTable tableAgentMaster;
            
            internal AgentMasterRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAgentMaster = ((AgentMasterDataTable)(this.Table));
            }
            
            public System.Guid Id {
                get {
                    return ((System.Guid)(this[this.tableAgentMaster.IdColumn]));
                }
                set {
                    this[this.tableAgentMaster.IdColumn] = value;
                }
            }
            
            public System.Guid ParentId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableAgentMaster.ParentIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentMaster.ParentIdColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableAgentMaster.NameColumn]));
                }
                set {
                    this[this.tableAgentMaster.NameColumn] = value;
                }
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableAgentMaster.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentMaster.NumberColumn] = value;
                }
            }
            
            public bool Active {
                get {
                    return ((bool)(this[this.tableAgentMaster.ActiveColumn]));
                }
                set {
                    this[this.tableAgentMaster.ActiveColumn] = value;
                }
            }
            
            public bool IsParentIdNull() {
                return this.IsNull(this.tableAgentMaster.ParentIdColumn);
            }
            
            public void SetParentIdNull() {
                this[this.tableAgentMaster.ParentIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableAgentMaster.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableAgentMaster.NumberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AgentMasterRowChangeEvent : EventArgs {
            
            private AgentMasterRow eventRow;
            
            private DataRowAction eventAction;
            
            public AgentMasterRowChangeEvent(AgentMasterRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AgentMasterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
